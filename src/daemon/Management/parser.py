class Parser(object):
    
    @staticmethod
    def _tokenize(command):
        '''
        Builds a list of the tokens generated by splitting the string delimited by a right chevron.
        Strips leading/trailing spaces.
        '''
        return [token.strip() for token in command.split('>', 1)]

    @staticmethod
    def _getPattern(tokens):
        '''Attempt to translate the given regex if it exists, else return None.'''
        return Parser._translate(tokens[1]) if len(tokens) > 1 and tokens[1] else None

    @staticmethod
    def _translate(pattern):
        '''This provides a bit of sugar for the user by letting them say "all" instead of .*'''
        return '.*' if pattern == 'all' else pattern

    @staticmethod
    def parse(command):
        '''
        Takes in a string of the formats:
            command
                or
            command > regex
        Returns strings if tokens were successfully parsed. Missing tokens return None.
        '''
        tokens = Parser._tokenize(command)
        command = tokens[0]
        pattern = Parser._getPattern(tokens)
        return command,pattern